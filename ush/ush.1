.TH USH 1 "13 August 2004" "CSC 501 OS Principles"
.SH NAME
ush \- the micro (mu) shell command interpreter.
.SH SYNOPSIS
.B ush
.SH DESCRIPTION
\fIush\fR is a command interpreter with a syntax similar to
UNIX C shell, \fIcsh\fR(1).
However, it is for instructional purposes only, therefore it is much
simpler.
.SS "Initialization and Termination"
When first stared, \fIush\fR normally performs commands from the file 
\fI~/.ushrc\fR, provided that it is readable.
Commands in this file are processed just the same as if they were
taken from standard input.
.SS "Interactive Operation"
After startup processing, an interactive \fIush\fR shell begins reading
commands from the terminal, prompting with \fIhostname%\fR.
The shell then repeatedly performs the following actions: a line of
command input is read and broken into \fIwords\fR; this sequence of words is
parsed (as described under
\fBUsage\fR); and the shell executes each command in the current line.
.SH USAGE
.SS "Lexical Structure"
The shell splits input lines into words separated by whitespace
(spaces or tabs), with the following exceptions:
.PP
.IP "" 4
The special characters &, |, ;, <, and > and the multi-character sequences
>>, |&, >& and >>& are always separate words, whether or not they are
surrounded by whitespace.
.PP
.IP "" 4
Special characters preceded by a backslash character (\\) are not
interpreted by the shell.
Two backslashes together sends the backslash character to the shell;
otherwise the backslash is stripped from the input.
.PP
.IP "" 4
Characters enclosed in double quotes (") or single quotes (') form a
single word.  Special characters inside of strings  
do not form separate words.
.SS "Command Line Parsing"
A \fIsimple command\fR is a sequence of words, the first of which 
specifies the command to be executed.
A \fIpipeline\fR is a sequence of one or more simple commands
separated by | or |&.
With |, the standard output of the preceding command is redirected to
the standard input of the command that follows.
With |&, both the standard error and the standard output are
redirected through the pipeline.
.PP
A \fIlist\fR is a sequence of one or more pipelines separated by ; or &.
Pipelines joined into sequences with ; will be executed sequentially.
Pipelines ending with & are executed asynchronously.
In which case, 
the shell does not wait for the pipeline to finish; instead, it
displays the job number (see \fBJob Control\fR) and associated process
ID, and begins processing the subsequent pipelines (prompting if necessary).
.SS "I/O Redirection"
The following separators indicate that the subsequent word is the name
of a file to which the command's standard input, standard output, or
standard error is redirected.
.TP 8
<
Redirect the standard input.
.TP 8
>, >&
Redirect the standard output to a file.  If file does not exist, it is
created.  If it does exist, it is overwritten and its previous contents
are lost.  The & form redirects both standard output and standard
error to the file.
.TP 8
>>, >>&
Append the standard output.  Like >, but places output at the end of
the file rather than overwriting.  The & form appends both standard
output and standard error to the file.
.SS "Command Execution"
If the command is an \fIush\fR shell built-in, the shell executes it
directly.  Otherwise, the shell searches for a file by that name with
execute access.
If the command-name contains a /, the shell takes it as a pathname and
searches for it.
If a pathname begins with a /, then the path is absolute; otherwise,
the path is relative to the current working directory.
If the command-name does not contain a /, the shell attempts to
resolve it to a pathname, searching each directory in the PATH
variable for the command.
.PP
When a file, with its pathname resolved, is found that has proper
execute permission, the shell forks a new process to run the command.
The shell also passes along any arguments to the command.
Using one of the flavor of \fIexec\fR system call, 
such as \fIexecv\fR(2V), the newly forked process
attempts to overlay the desired program.
If successful, the shell is silent.
.PP
If the file does not have execute permissions, or if the pathname
matches a directory, a ``permission denied'' message is displayed. If
the pathname cannot be resolved a ``command not found'' message is
displayed.
If either of these errors occurs with any component of a pipeline the
entire pipeline is aborted, even though some of the pipeline may
already be executing.
.SS "Environment Variables"
Environment variables may be accessed via the \fBsetenv\fR
built-in commands.
When a program is exec'd the environment variables are passed as
parameters to \fIexecv\fR or equivalent.
.SS "Signal Handling"
The shell ignores QUIT signals.  Background jobs are immune
to signals generated from the keyboard, including hangups (HUP).
Other signals have the values that \fIush\fR inherited from its
environment.  \fIUsh\fR catches the TERM signal.
.SS "Job Control"
The shell associates a numbered \fIjob\fR with each command sequence,
to keep track of those commands that are running in the background or
have been stopped with TSTP signals (typically CTRL-Z).  When a
command is started in the background using &, the shell displays a
line with the job number in brackets and the process number; e.g.,
[1] 2345
.PP
To see the current list of jobs, use the \fBjobs\fR built-in command.
The job most recently stopped (or put into the background if none are
stopped) is referred to as the \fIcurrent\fR job.
.PP
To manipulate jobs, refer to the built-in commands \fBbg\fR, \fBfg\fR,
\fBkill\fR.
.PP
A reference number to a job begins with a `%'. To refer to job number
\fIj\fR use \fI%j\fR, as in: \fIbg %j\fR.
.SS "Status Reporting"
While running interactively, the shell tracks the status of each job
and reports whenever it finishes or becomes blocked.  It 
displays a message to this effect as it issues a prompt, so as to
avoid disturbing the appearance of your input.
.SS "Builtin commands"
Built-in commands are executed within \fIush\fR.  If a built-in
command occurs as any component of a pipeline except the last, it is
executed in a subshell.
.TP 8
.B bg %\fIjob\fR
Puts the specified job into the background.
.TP 8
.B cd \fR[\fIdir\fR]
Change the working directory of the shell to \fIdir\fR,  provided it
is a directory and the shell has the appropriate permissions.
Without an argument, it changes the working directory to the original
(home) directory.
.TP 8
.B fg %\fIjob\fR
Brings the specified job into the foreground.
.TP 8
.B echo %\fIword\fR ...
Writes each \fIword\fR to the shell's standard output, 
separated by spaces and terminated with a newline.
.TP 8
.B jobs
Lists the active jobs.
.TP 8
.B kill \fB%\fIjob\fR 
Send the TERM (terminate) signal to the indicated job.
.TP 8
.B logout 
Exits the shell.
.TP 8
.B nice \fR[\fB[+/-]\fInumber\fR] [\fIcommand\fR]
Sets the scheduling priority for the shell to 
\fInumber\fR,
or, without 
\fInumber\fR,
to 4. With
\fIcommand\fR,
runs
\fIcommand\fR
at the appropriate priority.  The greater the
\fInumber\fR,
the less cpu the  process  gets.
If no sign before the number, assume it is positive.
.TP 8
.B pwd
Prints the current working directory.
.TP 8
.B setenv \fR[\fIVAR \fR[\fIword\fR]]
Without arguments, prints the names and values of all environment variables.
Given \fIVAR\fR, sets the environment variable \fIVAR\fR to \fIword\fR
or, without \fIword\fR, to the null string.
.TP 8
.B unsetenv \fIVAR
Removes environment variable whose name matches \fIVAR\fR.
.TP 8
.B where \fIcommand
Reports  all known instances of 
\fIcommand\fR, including
builtins and executables in \fBpath\fR.
.SH FILES
.PD 0
.TP 16
.I ~/.ushrc \fR
Read at the beginning of execution by each shell.
.SH "SEE ALSO"
csh(1), dup(2), execv(2), fork(2), killpg(2), pipe(2), sigvec(2), vfork(2), 
wait(2), environ(7), Introduction to the C Shell
